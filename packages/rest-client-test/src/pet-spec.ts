import { ClientSpec, restify } from '@oas-ts/rest-client';

// This should eventually be an autogenerated file
export interface NewPet {
    name: string;
    tag?: string;
}

export interface Pet {
    id: number;
    name: string;
    tag?: string;
}

// TODO: add these types and their validation
type BadRequestError = {};
type NotFoundError = {};

// TODO: Rename to ServerError? or not?
export interface UnknownResponseError {
    code: number;
    message: string;
}

export interface PetsEndpoints extends ClientSpec {
    put: {
    };
    get: {
        '/pets': {
            options: {
                queryParams: {
                    /** How many items to return at one time (max 100) */
                    limit?: number,
                    /** Tags to filter by */
                    tags?: string[];
                }
            },
            responses: {
                // If there are more than one error it should be an union
                success: {
                    code: 200;
                    json: Pet[];
                },
                error: {
                    code: number;
                    json: UnknownResponseError
                } | {
                    // TODO: revisit this
                    code: 400;
                    json: BadRequestError;
                }
            }
        },
        '/pets/{petId}': {
            options: {
                pathParams: {
                    /** The id of the pet to retrieve */
                    'petId': number
                }
            },
            responses: {
                // If there are more than one error it should be an union
                success: {
                    code: 200;
                    json: Pet;
                },
                error: {
                    code: number;
                    json: UnknownResponseError
                } | {
                    // TODO: revisit this
                    code: 400;
                    json: BadRequestError;
                } | {
                    // TODO: revisit this
                    code: 404;
                    json: NotFoundError;
                }
            }
        },
        '/ping': {
            // TODO: {} or undefined? Having undefined allows me to avoid necesary second param
            options: undefined,
            responses: {
                // If there are more than one error it should be an union
                success: {
                    code: 200;
                    json: string;
                },
                error: {
                    code: number;
                    json: UnknownResponseError
                } | {
                    // TODO: Modify the server.ts to allow that I don't define this in the spec
                    code: 400;
                    json: BadRequestError;
                }
            }
        }
    };
    post: {
        '/pets': {
            options: {
                body: {
                    contentType: 'application/json';
                    data: NewPet
                }
            },
            responses: {
                // If there are more than one error it should be an union
                success: {
                    code: 200;
                    json: Pet;
                },
                error: {
                    code: number;
                    json: UnknownResponseError
                } | {
                    // TODO: revisit this
                    code: 400;
                    json: BadRequestError;
                }
            }
        }
    };
    delete: {

    };
}

export default restify<PetsEndpoints>({servers: 'http://localhost:3000'});