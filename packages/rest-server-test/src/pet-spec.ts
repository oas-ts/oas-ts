import { Contract, num, str, strictObjOf, undef } from 'parmenides';
import { createServerSomething as createRest, RouteDefinition } from './server';
import { arrOrSingleObjectOf } from './utils/heraclitus/arr-or-single-object-of';
import { numberLike } from './utils/heraclitus/number-like';
import { objectOfLike } from './utils/heraclitus/object-of-like';
import { optional } from './utils/parmenides-pr/optional';
// This should eventually be an autogenerated file

export const petContract = strictObjOf({
    id: num,
    name: str,
    tag: optional(str)
});

export const newPetContract = strictObjOf({
    name: str,
    tag: optional(str)
});

// ------------------------
// Query validators
// ------------------------
// get: /pets
// TODO: try to change to a strictObjectOfLike
function asUnknown<T> (contract: Contract<T>) {
    return (val: unknown) => contract(val as any);
}

const get1QueryContract = asUnknown(strictObjOf({
    limit: optional(numberLike),
    tags: optional(arrOrSingleObjectOf(str))
}));


// ------------------------
// Path validators
// ------------------------
// get: /pets
const get2PathContract = objectOfLike({
    petId: numberLike
});

export interface NewPet {
    name: string;
    tag: string | undefined;
}

export interface Pet {
    id: number;
    name: string;
    tag: string | undefined;
}

export interface UnknownResponseError {
    code: number;
    message: string;
}

export interface PetsEndpoints {
    put: {
    };
    get: {
        '/pets': {
            options: {
                queryParams: {
                    /** How many items to return at one time (max 100) */
                    limit?: number,
                    /** Tags to filter by */
                    tags?: string[];
                }
            },
            responses: {
                // If there are more than one error it should be an union
                success: {
                    code: 200;
                    json: Pet[];
                },
                error: {
                    code: number;
                    json: UnknownResponseError
                }
            }
        },
        '/pets/{petId}': {
            options: {
                pathParams: {
                    /** The id of the pet to retrieve */
                    'petId': number
                }
            },
            responses: {
                // If there are more than one error it should be an union
                success: {
                    code: 200;
                    json: Pet;
                },
                error: {
                    code: number;
                    json: UnknownResponseError
                }
            }
        },
        '/ping': {
            // options: undefined,
            options: {},
            responses: {
                // If there are more than one error it should be an union
                success: {
                    code: 200;
                    json: string;
                },
                error: {
                    code: number;
                    json: UnknownResponseError
                }
            }
        }
    };
    post: {
        '/pets': {
            options: {
                body: {
                    contentType: 'application/json';
                    data: NewPet
                }
            },
            responses: {
                 // If there are more than one error it should be an union
             success: {
                    code: 200;
                    json: Pet;
                },
                error: {
                    code: number;
                    json: UnknownResponseError
                }
            }
        }
    };
    delete: {

    };
}

export type AllEndpoints
    = RouteDefinition<PetsEndpoints, 'get', '/ping'>
    | RouteDefinition<PetsEndpoints, 'get', '/pets'>
    | RouteDefinition<PetsEndpoints, 'get', '/pets/{petId}'>
    | RouteDefinition<PetsEndpoints, 'post', '/pets'>;

export default createRest<PetsEndpoints, AllEndpoints>({
    get: {
        '/pets': {
            queryParams: get1QueryContract,
            pathParams: strictObjOf({}),
            body: undef
        },
        '/ping': {
            queryParams: strictObjOf({}),
            pathParams: strictObjOf({}),
            body: undef
        },
        '/pets/{petId}': {
            queryParams: strictObjOf({}),
            pathParams: get2PathContract,
            body: undef
        }
    },
    post: {
        '/pets': {
            queryParams: strictObjOf({}),
            pathParams: strictObjOf({}),
            body: newPetContract
        },
    },
    put: {

    }
});