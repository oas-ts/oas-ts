interface MissingRoutes<R> {
    invalid: R
}

interface ExtraRoutes<R> {
    invalid: R
}

type ExpectAllRoutes<ProvidedRoutes, AllRoutes> =
    Exclude<ProvidedRoutes, AllRoutes> extends never ?
        Exclude<AllRoutes,ProvidedRoutes> extends never ?
            ProvidedRoutes :
            MissingRoutes<Exclude<AllRoutes, ProvidedRoutes>> :
            ExtraRoutes<Exclude <ProvidedRoutes, AllRoutes>>;


export function createServer<AllRoutes extends string>() {

    function registerAllEndpoints<ProvidedRoutes extends string>(routes: ExpectAllRoutes<ProvidedRoutes, AllRoutes>[]) {

    }

    return {
        registerAllRoutes: registerAllEndpoints,
    }
}

// Pass the Type parameter in here
const {registerAllRoutes} = createServer<'A' | 'B' | 'C'>();

// Use type inference here
registerAllRoutes(['A', 'B', 'C']); // Ok
registerAllRoutes(['A', 'C', 'B']); // Ok
registerAllRoutes(['A', 'C', 'B', 'X', 'Z']); // Ok
registerAllRoutes(['A', 'B', 'C', 'C']); // Ok (but ideally not)
registerAllRoutes(['A', 'B']); // Error, missing C