type ErrorOut<A, B> = Exclude<A, B> extends never ? Exclude<B,A> extends never ?
    A : Exclude<B, A> : Exclude <A, B>;

let a: ErrorOut<'a' | 'b', 'a' | 'b'> = 'a';
let b: ErrorOut<'a' | 'b', 'b' | 'a'> = 'a';
let c: ErrorOut<'a', 'a' | 'b'> = 'a';
let d: ErrorOut<'a' | 'b', 'a'> = 'a';

export function createServer<AllRoutes extends string>() {

    function registerAllEndpoints<ProvidedRoutes extends string>(routes: ErrorOut<ProvidedRoutes, AllRoutes>[]) {

    }

    function createValidatedEndpoint(...magic) {

    }
    return {
        registerAllRoutes: registerAllEndpoints,
        createValidatedEndpoint
    }
}

// Pass the Type parameter in here
const {registerAllRoutes} = createServer<'A' | 'B' | 'C'>();

// Use type inference here
registerAllRoutes(['A', 'B', 'C']); // Ok
registerAllRoutes(['A', 'C', 'B']); // Ok
registerAllRoutes(['A', 'C', 'B', 'X']); // Ok
registerAllRoutes(['A', 'B', 'C', 'C']); // Ok (but ideally not)
registerAllRoutes(['A', 'B']); // Error, missing C